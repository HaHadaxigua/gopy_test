
# python wrapper for package gopy_test/example/factory within overall package factory
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# ___build build --vm=python3 -output=example/factory_out gopy_test/example/factory

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _factory
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from factory import factory
# and then refer to everything using factory. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for slice []factory.XInterface
class Slice_factory_XInterface(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_factory.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_factory.IncRef(self.handle)
		else:
			self.handle = _factory.Slice_factory_XInterface_CTor()
			_factory.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_factory_XInterface.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_factory.DecRef(self.handle)
	def __str__(self):
		s = 'factory.Slice_factory_XInterface len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'factory.Slice_factory_XInterface([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _factory.Slice_factory_XInterface_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _factory.Slice_factory_XInterface_len(self.handle)
				return Slice_factory_XInterface(handle=_factory.Slice_factory_XInterface_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return XInterface(handle=_factory.Slice_factory_XInterface_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_factory.Slice_factory_XInterface_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_factory_XInterface.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _factory.Slice_factory_XInterface_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_factory.Slice_factory_XInterface_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---
def XInterfaceList():
	"""
	XInterfaceList Gets Go Variable: factory.XInterfaceList
	
	"""
	return Slice_factory_XInterface(handle=_factory.factory_XInterfaceList())

def Set_XInterfaceList(value):
	"""
	Set_XInterfaceList Sets Go Variable: factory.XInterfaceList
	
	"""
	if isinstance(value, go.GoClass):
		_factory.factory_Set_XInterfaceList(value.handle)
	else:
		_factory.factory_Set_XInterfaceList(value)



# ---- Interfaces ---

# Python type for interface factory.XInterface
class XInterface(go.GoClass):
	"""XInterface need to implement the XInterface\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_factory.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_factory.IncRef(self.handle)
		else:
			self.handle = 0
	def DoA(self, goRun=False):
		"""DoA() """
		_factory.factory_XInterface_DoA(self.handle, goRun)
	def DoB(self):
		"""DoB() str"""
		return _factory.factory_XInterface_DoB(self.handle)

# Python type for interface factory.XInterfaceCreator
class XInterfaceCreator(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_factory.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_factory.IncRef(self.handle)
		else:
			self.handle = 0


# ---- Structs ---

# Python type for struct factory.A
class A(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_factory.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_factory.IncRef(self.handle)
		else:
			self.handle = _factory.factory_A_CTor()
			_factory.IncRef(self.handle)
			if  0 < len(args):
				self.NameA = args[0]
			if "NameA" in kwargs:
				self.NameA = kwargs["NameA"]
	def __del__(self):
		_factory.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'factory.A{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'factory.A ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def NameA(self):
		return _factory.factory_A_NameA_Get(self.handle)
	@NameA.setter
	def NameA(self, value):
		if isinstance(value, go.GoClass):
			_factory.factory_A_NameA_Set(self.handle, value.handle)
		else:
			_factory.factory_A_NameA_Set(self.handle, value)
	def DoA(self, goRun=False):
		"""DoA() """
		_factory.factory_A_DoA(self.handle, goRun)
	def DoB(self):
		"""DoB() str"""
		return _factory.factory_A_DoB(self.handle)

# Python type for struct factory.B
class B(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_factory.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_factory.IncRef(self.handle)
		else:
			self.handle = _factory.factory_B_CTor()
			_factory.IncRef(self.handle)
			if  0 < len(args):
				self.NameB = args[0]
			if "NameB" in kwargs:
				self.NameB = kwargs["NameB"]
	def __del__(self):
		_factory.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'factory.B{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'factory.B ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def NameB(self):
		return _factory.factory_B_NameB_Get(self.handle)
	@NameB.setter
	def NameB(self, value):
		if isinstance(value, go.GoClass):
			_factory.factory_B_NameB_Set(self.handle, value.handle)
		else:
			_factory.factory_B_NameB_Set(self.handle, value)
	def DoA(self, goRun=False):
		"""DoA() """
		_factory.factory_B_DoA(self.handle, goRun)
	def DoB(self):
		"""DoB() str"""
		return _factory.factory_B_DoB(self.handle)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def IteratorAndDo(list):
	"""IteratorAndDo([]object list) str"""
	return _factory.factory_IteratorAndDo(list.handle)
def AddFuncToFactory(typeName, pc, goRun=False):
	"""AddFuncToFactory(str typeName, object pc) """
	_factory.factory_AddFuncToFactory(typeName, pc.handle, goRun)
def BuildXInterface(typeName):
	"""BuildXInterface(str typeName) object, str"""
	return XInterface(handle=_factory.factory_BuildXInterface(typeName))


