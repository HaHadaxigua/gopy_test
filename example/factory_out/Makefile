# Makefile for python interface for package factory.
# File is generated by gopy. Do not edit.
# ___build build --vm=python3 -output=example/factory_out gopy_test/example/factory

GOCMD=go
GOBUILD=$(GOCMD) build -mod=mod
GOIMPORTS=goimports
PYTHON=/usr/bin/python3
LIBEXT=.so

# get the CC and flags used to build python:
GCC = $(shell $(GOCMD) env CC)
CFLAGS = -I/usr/include/python3.8
LDFLAGS = -L/usr/lib -lpython3.8 -lcrypt -lpthread -ldl  -lutil -lm -lm

all: gen build

gen:
	___build build -no-make --vm=python3 gopy_test/example/factory

build:
	# build target builds the generated files -- this is what gopy build does..
	# this will otherwise be built during go build and may be out of date
	- rm factory.c
	# goimports is needed to ensure that the imports list is valid
	$(GOIMPORTS) -w factory.go
	# generate factory_go$(LIBEXT) from factory.go -- the cgo wrappers to go functions
	$(GOBUILD) -buildmode=c-shared -o factory_go$(LIBEXT) factory.go
	# use pybindgen to build the factory.c file which are the CPython wrappers to cgo wrappers..
	# note: pip install pybindgen to get pybindgen if this fails
	$(PYTHON) build.py
	# build the _factory$(LIBEXT) library that contains the cgo and CPython wrappers
	# generated factory.py python wrapper imports this c-code package
	
	$(GCC) factory.c  factory_go$(LIBEXT) -o _factory$(LIBEXT) $(CFLAGS) $(LDFLAGS) -fPIC --shared -w
	


